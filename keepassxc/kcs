#!/bin/sh

###################################################################
# Script Name	: KeepassXC Cloud Sync (KCS)
# Description	: A keepassxc integration with rclone for database.
# 		  Merges the database and sends it to the cloud.
# Args          :
# Dependencies 	: mkdir, cp, read, gawk, keepassxc-cli, rclone, fzf
# Variables     : $KEEPASS_DIR - place where you store your local keepass db
# Author       	: Mateusz Reszka
# Email         : mateusz@mateuszreszka.xyz
###################################################################

set -e

# throw error if $KEEPASS_DIR not defined
[ -z $KEEPASS_DIR ] ||\
    [ "$KEEPASS_DIR" == "" ] ||\
    [ ! -d $KEEPASS_DIR ] &&\
    echo "set up \$KEEPASS_DIR before running the script" &&\
    exit 1

find_main_folder=$KEEPASS_DIR

# directory where downloaded kdbx files will be stored
tmp_copy_dir="/tmp"

# directory for backups
backup_dir="$HOME/.local/share/kcs/backups"
[ ! -d "$backup_dir" ] &&\
    echo "backup dir '$backup_dir' created" &&\
    mkdir -p $backup_dir

backup_file_name="$(date +%F_%H:%M:%S).kdbx" # i.e. 2020-02-02_13:14:59.kdbx

# list remotes and pick one
[ -z "$remote" ] && remote=$(rclone listremotes | sed 's/://g' | fzf --header='Provide remote name')
[ -z "$remote" ] && echo "pick remote" && exit 2

# list remote kdbx files and pick one 
[ -z "$remote_file" ] && remote_file=$(rclone lsl $remote --include "*.kdbx" --max-depth 2 |\
    awk '{print $4}' |\
    fzf --header='Provide remote keepass db file')

# list local kdbx files and pick one
[ -z "$local_file" ] && local_file=$(find $find_main_folder -iname "*.kdbx" | fzf --header="Pick which local keepass directory")

[ -z "$merge" ] && read -n 1 -r -p "Do you want to merge it? If not it will simply replace cloud's version with your local copy. y/n (default:y)"$'\n' merge
printf "\n"

if [ "$merge" = y ]; then

  printf "Downloading...\n"
  # downloads the file to tmp dir
  rclone copy -v "$remote:$remote_file" "$tmp_copy_dir"

  printf "Download Finished!\n"

  [ -z "$backup" ] && read -n 1 -p "Do you want to backup current db? y/n (default: n)"$'\n' backup
  printf "\n"

  # create backup directory if does not exist; -p for recursive folder creation
  if [ "$backup" = y ]; then
  	[ ! -d "$backup_dir" ] &&\
  		mkdir -p "$backup_dir" &&\
  		printf "backup directory created: %s\n" $backup_dir

    backup_full_dir="$backup_dir/$backup_file_name"
    cp "$local_file" "$backup_full_dir"
    printf "backup file created at %s\n" $backup_full_dir
  fi
  
  [ -z "$has_key" ] && read -n 1 -p "Do you want to use key file? y/n (default: n)"$'\n' has_key
  printf "\n"

  printf "Merging...\n"

  if [ "$has_key" = y ]; then
  	[ -z "$key" ] && key=$(find $find_main_folder | fzf --header="Provide a key file")
  	keepassxc-cli merge $local_file "$tmp_copy_dir/$remote_file" --same-credentials -k $key
  else
  	keepassxc-cli merge $local_file "$tmp_copy_dir/$remote_file" --same-credentials
  fi

  printf "Merge done!\n"
fi

printf "Uploading...\n"
# uploads merged database to cloud
rclone copy -v "$local_file" "$remote:"

printf "Uploading done!\n"
